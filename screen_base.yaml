esphome:
  name: ${device_id}
  name_add_mac_suffix: true
  on_boot:
    - priority: 220.0
      then:
        - it8951e.clear
        - delay: 100ms
        - it8951e.updateslow
    - priority: -100.0
      then:
        - delay: 10s
        - it8951e.updateslow

esp32:
  board: m5stack-grey
  framework:
    type: arduino

external_components:
  - source:
      type: local
      path: ./git/m5paper_esphome/components

# Enable logging
logger:
  level: DEBUG

# Enable psram
psram:

# Enable Home Assistant API
api:

globals:
  - id: material_icons_map
    type: std::map<std::string, std::string>
    restore_value: no
    initial_value: |
      {
        {"mdi-weather-night", "󰖔"},
        {"mdi-weather-cloudy", "󰖐"},
        {"mdi-weather-cloudy-alert", "󰼯"},
        {"mdi-weather-fog", "󰖑"},
        {"mdi-weather-hail", "󰖒"},
        {"mdi-weather-lightning-rainy", "󰙾"},
        {"mdi-weather-lightning", "󰖓"},
        {"mdi-weather-partly-cloudy", "󰖕"},
        {"mdi-weather-night-partly-cloudy", "󰼱"},
        {"mdi-weather-pouring", "󰖖"},
        {"mdi-weather-rainy", "󰖗"},
        {"mdi-weather-snowy-rainy", "󰙿"},
        {"mdi-weather-snowy", "󰖘"},
        {"mdi-weather-sunny", "󰖙"},
        {"mdi-weather-windy-variant", "󰖞"},
        {"mdi-weather-windy", "󰖝"},
        {"mdi-cloud-question", "󰨹"},
        {"mdi-thermometer", "󰔏"},
        {"mdi-water-percent", "󰖎"},
        {"mdi-molecule-co2", "󰟤"},
        {"mdi-wind-power-outline", "󱪉"},
        {"mdi-air-conditioner", "󰀛"},
        {"mdi-thermometer-plus", "󰸅"},
        {"mdi-thermometer-minus", "󰸄"},
        {"mdi-home-outline", "󰚡"},
        {"mdi-tree-outline", "󰹩"},
        {"mdi-gauge", "󰊚"},
        {"mdi-volume-minus", "󰝞"},
        {"mdi-volume-plus", "󰝝"},
        {"mdi-battery-high", "󱊣"},
        {"mdi-battery-medium", "󱊢"},
        {"mdi-battery-low", "󱊡"},
        {"mdi-battery-alert-variant-outline", "󱃍"},
        {"mdi-battery-charging-high", "󱊦"},
        {"mdi-battery-unknown", "󰂑"},
        {"mdi-molecule-co2", "󰟤"},
        {"mdi-speaker", "󰓃"},
        {"mdi-speaker-off", "󰓄"},
        {"mdi-lightbulb", "󰌵"},
        {"mdi-lightbulb-off", "󰹏"},
        {"mdi-monitor", "󰍹"},
        {"mdi-monitor-off", "󰶐"},
        {"mdi-play-pause", "󰐎"},
        {"mdi-skip-previous", "󰒮"},
        {"mdi-skip-next", "󰒭"},
        {"mdi-numeric-0-circle-outline", "󰲟"},
        {"mdi-numeric-1-circle-outline", "󰲡"},
        {"mdi-numeric-2-circle-outline", "󰲣"},
        {"mdi-numeric-3-circle-outline", "󰲥"},
        {"mdi-numeric-4-circle-outline", "󰲧"},
        {"mdi-numeric-5-circle-outline", "󰲩"},
        {"mdi-numeric-6-circle-outline", "󰲫"},
        {"mdi-numeric-7-circle-outline", "󰲭"},
        {"mdi-numeric-8-circle-outline", "󰲯"},
        {"mdi-numeric-9-plus-circle-outline", "󰲳"},
      }

font:
  - file: 'gfonts://Roboto'
    id: normal_font
    size: 40
  - file: 'gfonts://Roboto'
    id: small_font
    size: 20
  - file: 'gfonts://Roboto@medium'
    id: condition_font
    size: 80
  - file: "gfonts://Orbitron"
    id: clock_font
    size: 80
  - file: 'gfonts://Roboto'
    id: clock_font2
    size: 56
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: small_icons_font
    size: 50
    glyphs: [
        '󰖖',    #mdi-weather-pouring
        '󰔏',    #mdi-thermometer
        '󰖎',    #mdi-water-percent
        '󰟤',    #mdi-molecule-co2
        '󱪉',    #mdi-wind-power-outline
        '󰀛',    #mdi-air-conditioner
        '󰚡',    #mdi-home-outline
        '󰹩',    #mdi-tree-outline
        '󰊚',    #mdi-gauge
        '󰝞',    #mdi-volume-minus
        '󰝝',    #mdi-volume-plus
        '󰸅',    #mdi-thermometer-plus
        '󰸄',    #mdi-thermometer-minus
      ]
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: weather_font
    size: 256
    glyphs: [
        '󰖔',    #mdi-weather-night
        '󰖐',    #mdi-weather-cloudy
        '󰼯',    #mdi-weather-cloudy-alert
        '󰖑',    #mdi-weather-fog
        '󰖒',    #mdi-weather-hail
        '󰙾',    #mdi-weather-lightning-rainy
        '󰖓',    #mdi-weather-lightning
        '󰖕',    #mdi-weather-partly-cloudy
        '󰼱',    #mdi-weather-night-partly-cloudy
        '󰖖',    #mdi-weather-pouring
        '󰖗',    #mdi-weather-rainy
        '󰙿',    #mdi-weather-snowy-rainy
        '󰖘',    #mdi-weather-snowy
        '󰖙',    #mdi-weather-sunny
        '󰖞',    #mdi-weather-windy-variant
        '󰖝',    #mdi-weather-windy
        '󰨹',    #mdi-cloud-question
      ]
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: battery_font
    size: 40
    glyphs: [
        '󱊣',    #mdi-battery-high
        '󱊢',    #mdi-battery-medium
        '󱊡',    #mdi-battery-low
        '󱃍',    #mdi-battery-alert-variant-outline
        '󱊦',    #mdi-battery-charging-high
        '󰂑',    #mdi-battery-unknown
      ]
  - file: "fonts/materialdesignicons-webfont.ttf"
    id: alarms_font
    size: 80
    glyphs: [
        '󰟤',    #mdi-molecule-co2
        '󰓃',    #mdi-speaker
        '󰓄',    #mdi-speaker-off
        '󰌵',    #mdi-lightbulb
        '󰹏',    #mdi-lightbulb-off
        '󰍹',    #mdi-monitor
        '󰶐',    #mdi-monitor-off
        '󰐎',    #mdi-play-pause
        '󰒮',    #mdi-skip-previous
        '󰒭',    #mdi-skip-next
        '󰀛',    #mdi-air-conditioner,
        '󰲟',    #mdi-numeric-0-circle-outline
        '󰲡',    #mdi-numeric-1-circle-outline
        '󰲣',    #mdi-numeric-2-circle-outline
        '󰲥',    #mdi-numeric-3-circle-outline
        '󰲧',    #mdi-numeric-4-circle-outline
        '󰲩',    #mdi-numeric-5-circle-outline
        '󰲫',    #mdi-numeric-6-circle-outline
        '󰲭',    #mdi-numeric-7-circle-outline
        '󰲯',    #mdi-numeric-8-circle-outline
        '󰲳',    #mdi-numeric-9-plus-circle-outline
      ]

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO12
  miso_pin: GPIO13

i2c:
  sda: GPIO21
  scl: GPIO22

display:
  - platform: it8951e
    id: m5paper_display
    cs_pin: GPIO15
    reset_pin: GPIO23
    reset_duration: 100ms
    busy_pin: GPIO27
    rotation: 0
    # reversed: True
    reversed: False
    update_interval: never
    lambda: |-
      // Clock
      it.strftime(15, 400, id(normal_font), "%Y-%m-%d %a", id(rtc_time).now());
      it.strftime(15, 440, id(clock_font), "%H:%M", id(rtc_time).now());

      // Weather icon
      #if 0 // Use for testing
      std::string _conditions[] {
        "clear-night",
        "cloudy",
        "exceptional",
        "fog",
        "hail",
        "lightning-rainy",
        "lightning",
        "partlycloudy",
        "pouring",
        "rainy",
        "snowy-rainy",
        "snowy",
        "sunny",
        "windy",
        "windy-variant",
      };
      static int _cond_index = 0;
      std::string conditions = _conditions[_cond_index];
      _cond_index = (_cond_index + 1) % 15;
      #else
      std::string conditions = id(weather_conditions).state;
      #endif
      std::string img = id(material_icons_map)["mdi-cloud-question"];
      if (conditions == "clear-night")
      {
          conditions = "clear";
          img = id(material_icons_map)["mdi-weather-night"];
      }
      else if (conditions == "cloudy")
          img = id(material_icons_map)["mdi-weather-cloudy"];
      else if (conditions == "exceptional")
          img = id(material_icons_map)["mdi-weather-cloudy-alert"];
      else if (conditions == "fog")
          img = id(material_icons_map)["mdi-weather-fog"];
      else if (conditions == "hail")
          img = id(material_icons_map)["mdi-weather-hail"];
      else if (conditions == "lightning-rainy")
      {
          conditions = "thunderstorm";
          img = id(material_icons_map)["mdi-weather-lightning-rainy"];
      }
      else if (conditions == "lightning")
          img = id(material_icons_map)["mdi-weather-lightning"];
      else if (conditions == "partlycloudy")
      {
          bool is_night = id(sun_position).state == "below_horizon";
          if (is_night)
              img = id(material_icons_map)["mdi-weather-night-partly-cloudy"];
          else
              img = id(material_icons_map)["mdi-weather-partly-cloudy"];
          conditions = "partly cloudy";
      }
      else if (conditions == "pouring")
      {
          img = id(material_icons_map)["mdi-weather-pouring"];
          conditions = "shower";
      }
      else if (conditions == "rainy")
          img = id(material_icons_map)["mdi-weather-rainy"];
      else if (conditions == "snowy-rainy")
      {
          img = id(material_icons_map)["mdi-weather-snowy-rainy"];
          conditions = "sleet";
      }
      else if (conditions == "snowy")
          img = id(material_icons_map)["mdi-weather-snowy"];
      else if (conditions == "sunny")
          img = id(material_icons_map)["mdi-weather-sunny"];
      else if (conditions == "windy")
          img = id(material_icons_map)["mdi-weather-windy"];
      else if (conditions == "windy-variant")
      {
          img = id(material_icons_map)["mdi-weather-windy-variant"];
          conditions = "windy";
      }

      uint base_y = 5;
      it.print(5, base_y + 100, id(weather_font), img.c_str());
      if (!conditions.empty())
      {
        conditions[0] = toupper(conditions[0]);
        it.printf(5, base_y, id(condition_font), conditions.c_str());
      }
      #define NOT_NAN(x) ((x) == (x))

      // Outdoor
      it.rectangle(265, base_y+127, 270, 230, COLOR_ON);
      it.rectangle(265+1, base_y+127+1, 270, 230, COLOR_ON);
      it.line(265+45, base_y+127, 535-45, base_y+127, COLOR_OFF);
      it.line(265+45+1, base_y+127+1, 535-45+1, base_y+127+1, COLOR_OFF);
      it.print(275+50, base_y + 100, id(normal_font), "Outdoor");
      // Temperature
      it.print(275, base_y + 150, id(small_icons_font), id(material_icons_map)["mdi-thermometer"].c_str());
      float temp = id(outdoor_temperature).state;
      if (NOT_NAN(temp))
        it.printf(335, base_y + 150, id(normal_font), "%.1f°C", temp);
      else
        it.print(335, base_y + 150, id(normal_font), "---");
      // Humidity
      it.print(275, base_y + 200, id(small_icons_font), id(material_icons_map)["mdi-water-percent"].c_str());
      float humidity = id(outdoor_humidity).state;
      if (NOT_NAN(humidity))
        it.printf(335, base_y + 200, id(normal_font), "%.1f%%", humidity);
      else
        it.print(335, base_y + 200, id(normal_font), "---");
      // Pressure
      it.print(275, base_y + 250, id(small_icons_font), id(material_icons_map)["mdi-gauge"].c_str());
      float pressure = id(indoor_pressure).state;
      if (NOT_NAN(pressure))
        it.printf(335, base_y + 250, id(normal_font), "%d hPa", (int)pressure);
      else
        it.print(335, base_y + 250, id(normal_font), "---");
      // Wind strength
      it.print(275, base_y + 300, id(small_icons_font), id(material_icons_map)["mdi-wind-power-outline"].c_str());
      float windspeed = id(outdoor_windspeed).state / 3.6;
      if (NOT_NAN(windspeed))
        it.printf(335, base_y + 300, id(normal_font), "%.1f m/s", windspeed);
      else
        it.print(335, base_y + 300, id(normal_font), "---");

      // Indoor
      it.rectangle(550, base_y+127, 270-10, 230, COLOR_ON);
      it.rectangle(550+1, base_y+127+1, 270-10, 230, COLOR_ON);
      it.line(550+45, base_y+127, 820-45-10, base_y+127, COLOR_OFF);
      it.line(550+45+1, base_y+127+1, 820-45-10+1, base_y+127+1, COLOR_OFF);
      it.print(560+60, base_y + 100, id(normal_font), "Indoor");
      // Temperature
      it.print(560, base_y + 150, id(small_icons_font), id(material_icons_map)["mdi-thermometer"].c_str());
      temp = id(indoor_temperature).state;
      if (NOT_NAN(temp))
        it.printf(620, base_y + 150, id(normal_font), "%.1f°C", temp);
      else
        it.print(620, base_y + 150, id(normal_font), "---");
      // Humidity
      it.print(560, base_y + 200, id(small_icons_font), id(material_icons_map)["mdi-water-percent"].c_str());
      humidity = id(indoor_humidity).state;
      if (NOT_NAN(humidity))
        it.printf(620, base_y + 200, id(normal_font), "%.1f%%", humidity);
      else
        it.print(620, base_y + 200, id(normal_font), "---");
      // CO2
      it.print(560, base_y + 250, id(small_icons_font), id(material_icons_map)["mdi-molecule-co2"].c_str());
      float co2 = id(indoor_co2).state;
      if (NOT_NAN(co2))
        it.printf(620, base_y + 250, id(normal_font), "%d ppm", (int)co2);
      else
        it.print(620, base_y + 250, id(normal_font), "---");
      // Aircon Power
      it.print(560, base_y + 300, id(small_icons_font), id(material_icons_map)["mdi-air-conditioner"].c_str());
      float power_of_aircon = id(aircon_power).state;
      if (NOT_NAN(power_of_aircon))
        it.printf(620, base_y + 300, id(normal_font), "%d W", (int)power_of_aircon);
      else
        it.print(620, base_y + 300, id(normal_font), "---");
      // Battery
      std::string battery_icon = id(material_icons_map)["mdi-battery-unknown"];
      float voltage = id(m5paper_battery_voltage).state;
      if (voltage > 4.10)
        battery_icon = id(material_icons_map)["mdi-battery-charging-high"];
      else
      {
        float battery_level = id(m5paper_battery_level).state;
        if (NOT_NAN(battery_level))
        {

          if (battery_level < 10)
              battery_icon = id(material_icons_map)["mdi-battery-alert-variant-outline"];
          else if (battery_level < 40)
              battery_icon = id(material_icons_map)["mdi-battery-low"];
          else if (battery_level < 70)
              battery_icon = id(material_icons_map)["mdi-battery-medium"];
          else
              battery_icon = id(material_icons_map)["mdi-battery-high"];
        }
      }
      it.print(910, 10, id(battery_font), battery_icon.c_str());

      // Living Light
      if(id(living_light).state)
        it.print(870, 100, id(alarms_font), id(material_icons_map)["mdi-lightbulb"].c_str());
      else
        it.print(870, 100, id(alarms_font), id(material_icons_map)["mdi-lightbulb-off"].c_str());

      // OLED monitor
      if(id(oled_monitor).state)
        it.print(870, 190, id(alarms_font), id(material_icons_map)["mdi-monitor"].c_str());
      else
        it.print(870, 190, id(alarms_font), id(material_icons_map)["mdi-monitor-off"].c_str());

      // HT-A9
      if(id(ht_a9).state)
      {
        it.print(870, 280, id(alarms_font), id(material_icons_map)["mdi-speaker"].c_str());
        uint base_left = 690;
        uint base_top = 380;
        uint base_width = 265;
        uint base_height = 540 - base_top - 4;
        // HT-A9
        it.rectangle(base_left, base_top, base_width, base_height, COLOR_ON);
        // it.rectangle(base_left+1, base_top+1, base_width, base_height, COLOR_ON);
        // Current Volume
        float volume = id(hta9_volume).state;
        it.printf(base_left+115, base_top+100, id(normal_font), "%.0f", volume);
        // Vol-
        it.print(base_left+45, base_top+100, id(small_icons_font), id(material_icons_map)["mdi-volume-minus"].c_str());
        // it.rectangle(720, 470, 70, 70, COLOR_ON);
        // Vol+
        it.print(base_left+185, base_top+100, id(small_icons_font), id(material_icons_map)["mdi-volume-plus"].c_str());
        // it.rectangle(860, 470, 70, 70, COLOR_ON);

        if(id(apple_tv).state != "standby" || id(foobar2k).state != "off")
        {
          // Play-Pause
          it.print(base_left+10-5, base_top+4, id(alarms_font), id(material_icons_map)["mdi-play-pause"].c_str());
          // it.rectangle(690, 380, 90, 80, COLOR_ON);
          // Previous
          it.print(base_left+100-5, base_top+4, id(alarms_font), id(material_icons_map)["mdi-skip-previous"].c_str());
          // it.rectangle(780, 380, 90, 80, COLOR_ON);
          // Next
          it.print(base_left+190-10, base_top+4, id(alarms_font), id(material_icons_map)["mdi-skip-next"].c_str());
          // it.rectangle(870, 380, 90, 80, COLOR_ON);
        }
      }
      else
      {
        it.print(870, 280, id(alarms_font), id(material_icons_map)["mdi-speaker-off"].c_str());
      }

      // AirCon
      // Icon
      it.print(540, 10, id(alarms_font), id(material_icons_map)["mdi-air-conditioner"].c_str());
      // it.rectangle(540, 10, 90, 80, COLOR_ON);
      if(id(aircon).state != "off")
        {
        it.rectangle(540, 10-5, 380, 80+10, COLOR_ON);
        // Temp-
        it.print(630+20, 10+15, id(small_icons_font), id(material_icons_map)["mdi-thermometer-minus"].c_str());
        // it.rectangle(630, 10, 90, 80, COLOR_ON);

        // Target temperature
        float target = id(aircon_target).state;
        it.printf(720, 10+15, id(normal_font), "%.1f°", target);

        // Temp+
        it.print(810+20, 10+15, id(small_icons_font), id(material_icons_map)["mdi-thermometer-plus"].c_str());
        // it.rectangle(810, 10, 90, 80, COLOR_ON);
      } else {
        it.rectangle(540, 10-5, 130, 80-10, COLOR_ON);
        it.printf(630, 10+15, id(normal_font), "off");
        }

      // CO2 graph
      unsigned int g_left = 310;
      unsigned int g_top = 405;
      unsigned int g_width = 360;
      unsigned int g_height = 120;
      it.graph(g_left, g_top, id(co2_graph), COLOR_ON);
      it.printf(g_left+105, g_top-30, id(small_font), "Chauffe-eau 6h");
      it.printf(g_left, g_top + g_height * 20 / 50 - 16, id(small_font), "50°C");
      it.printf(g_left, g_top+g_height-14, id(small_font), "20°C");
      it.line(g_left, g_top + g_height * 55 / 20 + 5, g_left + g_width+10, g_top + g_height * 55 / 20 + 5); // 1000 (= 1400 - 400) ppm

graph:
  - id: co2_graph
    sensor: indoor_co2
    duration: 6h
    min_value: 20
    max_value: 55
    width: 370
    height: 130
    x_grid: 1h
    y_grid: 200.0
    border: true

touchscreen:
  - platform: gt911
    display: m5paper_display
    id: gt911_touchscreen
    interrupt_pin: GPIO36
    transform:
      mirror_x: true
      mirror_y: false
      swap_xy: true
    calibration:
      y_min: 0
      x_min: 0
      x_max: 540
      y_max: 960

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  power_save_mode: "HIGH"

switch:
  - platform: restart
    id: restart_switch
    name: ${device_name} Restart

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: Europe/Paris
    on_time_sync:
      - bm8563.write_time
  - platform: bm8563
    id: rtc_time
    on_time:
      - seconds: 0
        then:
          - component.update: m5paper_display
      - seconds: 0
        minutes: 0
        then:
          - it8951e.updateslow

m5paper:
  battery_power_pin: GPIO5
  main_power_pin: GPIO2

sensor:
  - platform: adc
    disabled_by_default: true
    pin: GPIO35
    name: ${device_name} battery voltage
    id: m5paper_battery_voltage
    update_interval: 100s
    attenuation: 11db
    filters:
      - multiply: 2 #1,27272727
  - platform: sht3xd
    temperature:
      name: ${device_name} temperature
      id: m5paper_temperature
      device_class: "temperature"
      state_class: "measurement"
      icon: mdi:thermometer
    humidity:
      name: ${device_name} humidity
      id: m5paper_humidity
      device_class: "humidity"
      state_class: "measurement"
      icon: mdi:water-percent
    address: 0x44
    update_interval: 100s
  - platform: template
    name: ${device_name} battery level
    id: m5paper_battery_level
    unit_of_measurement: '%'
    device_class: "battery"
    state_class: "measurement"
    icon: mdi:battery-high
    update_interval: 200s
    lambda: |-
      constexpr float min_level = 3.52;
      constexpr float max_level = 4.15;
      return ((id(m5paper_battery_voltage).state - min_level) / (max_level - min_level)) * 100.00;
    filters:
      - clamp:
          min_value: 0
          max_value: 100
  - platform: homeassistant
    name: HT-A9 volume
    id: hta9_volume
    entity_id: ${ht_a9}
    attribute: volume_level
    filters:
      - multiply: 100
  - platform: homeassistant
    name: AirCon target temperature
    id: aircon_target
    entity_id: ${aircon}
    attribute: temperature
  - platform: homeassistant
    name: Outdoor temperature
    id: outdoor_temperature
    entity_id: ${weather_conditions}
    attribute: temperature
  - platform: homeassistant
    name: Outdoor humidity
    id: outdoor_humidity
    entity_id: ${weather_conditions}
    attribute: humidity
  - platform: homeassistant
    name: Wind speed
    id: outdoor_windspeed
    entity_id: ${weather_conditions}
    attribute: wind_speed
  - platform: homeassistant
    name: Aircon power
    id: aircon_power
    entity_id: ${aircon_power}
  - platform: homeassistant
    name: Indoor temperature
    id: indoor_temperature
    entity_id: ${indoor_temperature}
  - platform: homeassistant
    name: Indoor humidity
    id: indoor_humidity
    entity_id: ${indoor_humidity}
  - platform: homeassistant
    name: Indoor pressure
    id: indoor_pressure
    entity_id: ${weather_conditions}
    attribute: pressure
  - platform: homeassistant
    name: Indoor CO2
    id: indoor_co2
    entity_id: ${indoor_co2}

text_sensor:
  - platform: homeassistant
    name: Weather
    id: weather_conditions
    entity_id: ${weather_conditions}
  - platform: homeassistant
    name: Sun
    id: sun_position
    entity_id: sun.sun
  - platform: homeassistant
    name: Apple TV 4K state
    id: apple_tv
    entity_id: ${apple_tv}
  - platform: homeassistant
    name: foobar2000 state
    id: foobar2k
    entity_id: ${foobar2k}
  - platform: homeassistant
    name: AirCon state
    id: aircon
    entity_id: ${aircon}

binary_sensor:
  - platform: gpio
    name: ${device_name} right button
    id: right_button
    icon: mdi:gesture-tap-button
    pin:
      number: GPIO37
      inverted: true
  - platform: gpio
    name: ${device_name} BTN/PWR button
    icon: mdi:gesture-tap-button
    pin:
      number: GPIO38
      inverted: true
  - platform: gpio
    name: ${device_name} left button
    icon: mdi:gesture-tap-button
    pin:
      number: GPIO39
      inverted: true
  - platform: homeassistant
    name: HT-A9
    id: ht_a9
    entity_id: ${ht_a9}
  - platform: homeassistant
    name: Living Light
    id: living_light
    entity_id: ${living_light}
  - platform: homeassistant
    name: OLED monitor
    id: oled_monitor
    entity_id: ${oled_monitor}
  - platform: touchscreen
    name: Touch Button Light
    id: light_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 870
    x_max: 960
    y_min: 100
    y_max: 190
  - platform: touchscreen
    name: Touch Button Monitor
    id: monitor_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 870
    x_max: 960
    y_min: 190
    y_max: 280
  - platform: touchscreen
    name: Touch Button HT-A9
    id: hta9_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 870
    x_max: 960
    y_min: 280
    y_max: 370
  - platform: touchscreen
    name: Touch Button Vol-
    id: voldown_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 720
    x_max: 790
    y_min: 470
    y_max: 540
  - platform: touchscreen
    name: Touch Button Vol+
    id: volup_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 860
    x_max: 930
    y_min: 470
    y_max: 540
  - platform: touchscreen
    name: Touch Button PlayPause
    id: playpause_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 690
    x_max: 780
    y_min: 380
    y_max: 460
  - platform: touchscreen
    name: Touch Button SkipPrevious
    id: previous_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 780
    x_max: 870
    y_min: 380
    y_max: 460
  - platform: touchscreen
    name: Touch Button SkipNext
    id: next_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 870
    x_max: 960
    y_min: 380
    y_max: 460
  - platform: touchscreen
    name: Touch Button AirConSwitch
    id: aircon_switch_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 540
    x_max: 630
    y_min: 10
    y_max: 90
  - platform: touchscreen
    name: Touch Button AirCon-
    id: aircon_minus_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 630
    x_max: 720
    y_min: 10
    y_max: 90
  - platform: touchscreen
    name: Touch Button AirCon+
    id: aircon_plus_touch_button
    touchscreen_id: gt911_touchscreen
    x_min: 810
    x_max: 900
    y_min: 10
    y_max: 90
